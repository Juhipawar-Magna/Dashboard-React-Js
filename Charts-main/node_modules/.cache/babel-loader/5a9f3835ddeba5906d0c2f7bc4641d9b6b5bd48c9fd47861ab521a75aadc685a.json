{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juhipawa\\\\Downloads\\\\Charts-main\\\\Charts-main\\\\src\\\\components\\\\StackedBarChart.js\";\nimport React, { useState } from \"react\";\nimport { chart as ChartJS, categoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from \"react-chartjs-2\";\nimport faker from 'faker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(categoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const options = {\n  plugins: {\n    title: {\n      display: true,\n      text: 'Chart.js Bar Chart - Stacked'\n    }\n  },\n  responsive: true,\n  scales: {\n    x: {\n      stacked: true\n    },\n    y: {\n      stacked: true\n    }\n  }\n};\nlabels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\", \"User 5\", \"User 6\", \"User 7\", \"User 8\"];\nexport const data = {\n  labels,\n  datasets: [{\n    label: 'state 1',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 2',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 3',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 4',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 5',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 6',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 7',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 8',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 9',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'state 10',\n    data: labels.map(() => faker.datatype.number({\n      min: -1000,\n      max: 1000\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }]\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 12\n  }, this);\n}\n_c = App;\nexport default StackedBarChart;\n\n/*import React from \"react\";\r\nimport Chart from \"react-chartjs-2\";\r\nfunction Stackedbarchart()\r\n{\r\n    return(<div className=\"Charts\"><h2>Stacked bar chart in react react-chartjs-2</h2>\r\n                <type = \"bar\"\r\n                width={1349}\r\n                height={560}\r\n                series={[\r\n                    {\r\n                        name:\"state 1\",\r\n                        data:[4, 5, 4, 3,2],\r\n                        //color: '#f90000'\r\n                    },\r\n                    {\r\n                        name:\"state 2\",\r\n                        data:[2, 3, 2, 5,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 3\",\r\n                        data:[3, 2, 3, 7,2],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 4\",\r\n                        data:[1, 4, 5, 4,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 5\",\r\n                        data:[3, 6, 3, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 6\",\r\n                        data:[6, 2, 5, 8,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 7\",\r\n                        data:[2, 6, 7, 2,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 8\",\r\n                        data:[4, 5, 7, 4,5],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 9\",\r\n                        data:[1, 6, 6, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 10\",\r\n                        data:[2, 5, 2, 3,1],\r\n                       // color: '#000000'\r\n                    }\r\n                ]}\r\n                options={{\r\n                    title:{\r\n                        text:\"work status\"\r\n                    },\r\n                    chart:{\r\n                        stacked:true,\r\n                    },\r\n                    plotOptions:{\r\n                        bar:{\r\n                            horizontal:true,\r\n                            columnWidth:'100%'\r\n                          }\r\n                    },\r\n                    stroke: {\r\n                        width: 1,\r\n                    },\r\n                    xaxis:{\r\n                        title:{\r\n                            text:\"work status\"\r\n                        },\r\n                        categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n                    },\r\n                    yaxis:{\r\n                        title:{\r\n                            text:\"Data in state level\"\r\n                        },\r\n                    },\r\n                    legend:{\r\n                        position: 'bottom'\r\n                    },\r\n                    dataLabels:{\r\n                        enabled:true,\r\n                    },\r\n                    grid: {\r\n                        show:true,\r\n                        xaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        },\r\n                        yaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                />\r\n    );\r\n}\r\nexport default Stackedbarchart;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","chart","ChartJS","categoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","faker","register","options","plugins","title","display","text","responsive","scales","x","stacked","y","labels","data","datasets","label","map","datatype","number","min","max","backgroundColor","App","StackedBarChart"],"sources":["C:/Users/juhipawa/Downloads/Charts-main/Charts-main/src/components/StackedBarChart.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  chart as ChartJS,\r\n  categoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js'\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport faker from 'faker';\r\n\r\nChartJS.register(\r\n  categoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  plugins: {\r\n    title: {\r\n      display: true,\r\n      text: 'Chart.js Bar Chart - Stacked',\r\n    },\r\n  },\r\n  responsive: true,\r\n  scales: {\r\n    x: {\r\n      stacked: true,\r\n    },\r\n    y: {\r\n      stacked: true,\r\n    },\r\n  },\r\n};\r\n \r\n \r\n  labels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n    export const data = {\r\n      labels,\r\n    datasets: [ \r\n      \r\n      {\r\n        label: 'state 1',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 2',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 3',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 4',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 5',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 6',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 7',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 8',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 9',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 10',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },  \r\n    ]\r\n  };\r\n\r\n  \r\n   function App() {\r\n    return <Bar options={options} data={data} />;\r\n  }\r\n\r\nexport default StackedBarChart;\r\n\r\n\r\n\r\n\r\n/*import React from \"react\";\r\nimport Chart from \"react-chartjs-2\";\r\nfunction Stackedbarchart()\r\n{\r\n    return(<div className=\"Charts\"><h2>Stacked bar chart in react react-chartjs-2</h2>\r\n                <type = \"bar\"\r\n                width={1349}\r\n                height={560}\r\n                series={[\r\n                    {\r\n                        name:\"state 1\",\r\n                        data:[4, 5, 4, 3,2],\r\n                        //color: '#f90000'\r\n                    },\r\n                    {\r\n                        name:\"state 2\",\r\n                        data:[2, 3, 2, 5,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 3\",\r\n                        data:[3, 2, 3, 7,2],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 4\",\r\n                        data:[1, 4, 5, 4,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 5\",\r\n                        data:[3, 6, 3, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 6\",\r\n                        data:[6, 2, 5, 8,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 7\",\r\n                        data:[2, 6, 7, 2,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 8\",\r\n                        data:[4, 5, 7, 4,5],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 9\",\r\n                        data:[1, 6, 6, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 10\",\r\n                        data:[2, 5, 2, 3,1],\r\n                       // color: '#000000'\r\n                    }\r\n                ]}\r\n                options={{\r\n                    title:{\r\n                        text:\"work status\"\r\n                    },\r\n                    chart:{\r\n                        stacked:true,\r\n                    },\r\n                    plotOptions:{\r\n                        bar:{\r\n                            horizontal:true,\r\n                            columnWidth:'100%'\r\n                          }\r\n                    },\r\n                    stroke: {\r\n                        width: 1,\r\n                    },\r\n                    xaxis:{\r\n                        title:{\r\n                            text:\"work status\"\r\n                        },\r\n                        categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n                    },\r\n                    yaxis:{\r\n                        title:{\r\n                            text:\"Data in state level\"\r\n                        },\r\n                    },\r\n                    legend:{\r\n                        position: 'bottom'\r\n                    },\r\n                    dataLabels:{\r\n                        enabled:true,\r\n                    },\r\n                    grid: {\r\n                        show:true,\r\n                        xaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        },\r\n                        yaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                />\r\n    );\r\n}\r\nexport default Stackedbarchart;*/\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1BR,OAAO,CAACS,QAAQ,CACdR,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,CACP;AAED,OAAO,MAAMI,OAAO,GAAG;EACrBC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;IACR;EACF,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE;IACNC,CAAC,EAAE;MACDC,OAAO,EAAE;IACX,CAAC;IACDC,CAAC,EAAE;MACDD,OAAO,EAAE;IACX;EACF;AACF,CAAC;AAGCE,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,EAAC,QAAQ,CAAC;AAClF,OAAO,MAAMC,IAAI,GAAG;EAClBD,MAAM;EACRE,QAAQ,EAAE,CAER;IACEC,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,SAAS;IAChBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC,EACD;IACEN,KAAK,EAAE,UAAU;IACjBF,IAAI,EAAED,MAAM,CAACI,GAAG,CAAC,MAAMhB,KAAK,CAACiB,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC,CAAC;IACxEC,eAAe,EAAE;EACnB,CAAC;AAEL,CAAC;AAGA,SAASC,GAAG,GAAG;EACd,oBAAO,QAAC,GAAG;IAAC,OAAO,EAAEpB,OAAQ;IAAC,IAAI,EAAEW;EAAK;IAAA;IAAA;IAAA;EAAA,QAAG;AAC9C;AAAC,KAFSS,GAAG;AAIf,eAAeC,eAAe;;AAK9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9GA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}