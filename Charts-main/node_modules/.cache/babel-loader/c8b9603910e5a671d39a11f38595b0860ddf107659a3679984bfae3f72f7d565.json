{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juhipawa\\\\Documents\\\\Charts-main\\\\src\\\\components\\\\StackedBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ApexCharts from 'apexcharts';\nimport ReactApexChart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StackedBarChart = () => {\n  _s();\n  var _chartData$;\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/Items/');\n        const data = response.data;\n\n        // Extract the state counts and assigned users from the API response\n        const stateCountsByUser = data.reduce((acc, item) => {\n          const user = item.assigned_user;\n          const state = item.feature_state;\n          if (!acc[user]) {\n            acc[user] = {};\n          }\n          if (!acc[user][state]) {\n            acc[user][state] = 0;\n          }\n          acc[user][state] += 1;\n          return acc;\n        }, {});\n\n        // Convert state counts to chart data format\n        const chartData = Object.keys(stateCountsByUser).map(user => ({\n          name: user,\n          data: Object.keys(stateCountsByUser[user]).map(state => stateCountsByUser[user][state])\n        }));\n        setChartData(chartData);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  const options = {\n    chart: {\n      type: 'bar',\n      stacked: true\n    },\n    xaxis: {\n      categories: ((_chartData$ = chartData[0]) === null || _chartData$ === void 0 ? void 0 : _chartData$.data) || [] // Add null check here\n    },\n\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    },\n    legend: {\n      position: 'right'\n    },\n    fill: {\n      opacity: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stacked-bar-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stacked Bar Chart - State Counts by Assigned User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: chartData,\n      type: \"bar\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(StackedBarChart, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n_c = StackedBarChart;\nexport default StackedBarChart;\n\n// import React from \"react\";\n// import Chart from 'react-apexcharts';\n// function Stackedbarchart()\n// {\n//     return(<React.Fragment><div className=\"work status\"><h2>Welcome to Stackedbarchart</h2><Chart\n//                 type=\"bar\"\n//                 width={1349}\n//                 height={560}\n//                 series={[\n//                   {\n//                     name:\"state 1\",\n//                     data:[4, 5, 4, 3, 2, 7, 5, 2],\n//                     //color: '#f90000'\n//                 },\n//                 {\n//                     name:\"state 2\",\n//                     data:[2, 3, 2, 5, 6, 5, 1, 6],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 3\",\n//                     data:[3, 2, 3, 7, 2, 4, 5, 4],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 4\",\n//                     data:[6, 2, 5, 8, 1, 4, 5, 7],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 5\",\n//                     data:[3, 6, 3, 2, 4, 2, 5, 2],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 6\",\n//                     data:[6, 2, 5, 8, 1, 1, 6, 6],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 7\",\n//                     data:[2, 6, 7, 2, 1, 6, 2, 5],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 8\",\n//                     data:[4, 5, 7, 4, 5, 6, 2, 5],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 9\",\n//                     data:[1, 6, 6, 2, 4, 3, 2, 3],\n//                    // color: '#000000'\n//                 },\n//                 {\n//                     name:\"state 10\",\n//                     data:[2, 5, 2, 3, 1, 3, 6, 3],\n//                    // color: '#000000'\n//                 }\n//                 ]}\n//                 options={{\n//                     title:{\n//                         text:\"Employee BarChart\"\n//                     },\n//                     chart:{\n//                         stacked:true,\n//                     },\n//                     plotOptions:{\n//                         bar:{\n//                             horizontal:true,\n//                             columnWidth:'100%'\n//                           }\n//                     },\n//                     stroke: {\n//                         width: 5,\n//                     },\n//                     xaxis:{\n//                         title:{\n//                             text:\"state level\"\n//                         },\n//                         categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\n//                     },\n//                     yaxis:{\n//                         title:{\n//                             text:\"Users\"\n//                         },\n//                     },\n//                     legend:{\n//                         position: 'right'\n//                     },\n//                     dataLabels:{\n//                         enabled:true,\n//                     },\n//                     grid: {\n//                         show:true,\n//                         xaxis:{\n//                             lines:{\n//                                 show:false\n//                             }\n//                         },\n//                         yaxis:{\n//                             lines:{\n//                                 show:false\n//                             }\n//                         }\n//                     }\n//                 }}\n//                 /></div></React.Fragment>\n//     );\n// }\n\n/*import React, { useState } from \"react\";\r\nimport {\r\n  chart as ChartJS,\r\n  categoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js'\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst StackedBarchart = () => {\r\n  const [data, setData] = useState({\r\n    labels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"],\r\n    datasets: [ \r\n      \r\n      {\r\n        label: \"State 1\", \r\n        backgroundColor: \"#FF6384\",\r\n        data: [4, 5, 4, 3, 2],\r\n      },\r\n      {\r\n        label: \"State 2\",\r\n        backgroundColor: \"#36A2EB\",\r\n        data: [2, 3, 2, 5, 6, 7, 5],\r\n      },\r\n      {\r\n        label: \"State 3\",\r\n        backgroundColor: \"#f3ba2f\",\r\n        data: [3, 2, 3, 7, 2, 5, 1, 4, 3, 4],\r\n      },\r\n      {\r\n        label: \"State 4\",\r\n        backgroundColor: \"#2a71d0\",\r\n        data: [1],\r\n      },\r\n      {\r\n        label: \"State 5\",\r\n        backgroundColor: \"#ee82ee\",\r\n        data: [1],\r\n      },\r\n      {\r\n        label: \"State 6\",\r\n        backgroundColor: \"#3cb371\",\r\n        data: [1, 4, 5, 7, 1, 4, 5, 7, 3, 9],\r\n      },\r\n      {\r\n        label: \"State 7\",\r\n        backgroundColor: \"#6a5acd\",\r\n        data: [7, 2, 7, 2, 1, 5, 4, 8, 3, 6],\r\n      },\r\n      {\r\n        label: \"State 8\",\r\n        backgroundColor: \"#ffa500\",\r\n        data: [3, 6, 4, 1, 1, 6, 4, 2, 8, 3],\r\n      },\r\n      {\r\n        label: \"State 9\",\r\n        backgroundColor: \"#616161\",\r\n        data: [1, 7, 5, 4, 1, 5, 7, 2, 4, 6],\r\n      },\r\n      {        \r\n        label: \"State 10\",\r\n        backgroundColor: \"#b4b4b4\",\r\n        data: [ 6, 8, 4, 2, 9, 7, 3, 4, 1, 7],\r\n\r\n      },      \r\n    ],\r\n  });\r\n\r\n  const options = {\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {beginATZero: true },\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Bar data={data}  height={0} options={options} />\r\n    </div>\r\n  );\r\n};*/\n\n// export default Stackedbarchart;\nvar _c;\n$RefreshReg$(_c, \"StackedBarChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","ApexCharts","ReactApexChart","StackedBarChart","chartData","setChartData","fetchData","response","get","data","stateCountsByUser","reduce","acc","item","user","assigned_user","state","feature_state","Object","keys","map","name","error","console","log","options","chart","type","stacked","xaxis","categories","plotOptions","bar","horizontal","legend","position","fill","opacity"],"sources":["C:/Users/juhipawa/Documents/Charts-main/src/components/StackedBarChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport ApexCharts from 'apexcharts';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nconst StackedBarChart = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:8000/api/Items/');\r\n        const data = response.data;\r\n\r\n        // Extract the state counts and assigned users from the API response\r\n        const stateCountsByUser = data.reduce((acc, item) => {\r\n          const user = item.assigned_user;\r\n          const state = item.feature_state;\r\n\r\n          if (!acc[user]) {\r\n            acc[user] = {};\r\n          }\r\n\r\n          if (!acc[user][state]) {\r\n            acc[user][state] = 0;\r\n          }\r\n\r\n          acc[user][state] += 1;\r\n          return acc;\r\n        }, {});\r\n\r\n        // Convert state counts to chart data format\r\n        const chartData = Object.keys(stateCountsByUser).map((user) => ({\r\n          name: user,\r\n          data: Object.keys(stateCountsByUser[user]).map((state) => stateCountsByUser[user][state]),\r\n        }));\r\n\r\n        setChartData(chartData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const options = {\r\n    chart: {\r\n      type: 'bar',\r\n      stacked: true,\r\n    },\r\n    xaxis: {\r\n      categories: chartData[0]?.data || [], // Add null check here\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: true,\r\n      },\r\n    },\r\n    legend: {\r\n      position: 'right',\r\n    },\r\n    fill: {\r\n      opacity: 1,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"stacked-bar-chart-container\">\r\n      <h2>Stacked Bar Chart - State Counts by Assigned User</h2>\r\n      <ReactApexChart\r\n        options={options}\r\n        series={chartData}\r\n        type=\"bar\"\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StackedBarChart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import Chart from 'react-apexcharts';\r\n// function Stackedbarchart()\r\n// {\r\n//     return(<React.Fragment><div className=\"work status\"><h2>Welcome to Stackedbarchart</h2><Chart\r\n//                 type=\"bar\"\r\n//                 width={1349}\r\n//                 height={560}\r\n//                 series={[\r\n//                   {\r\n//                     name:\"state 1\",\r\n//                     data:[4, 5, 4, 3, 2, 7, 5, 2],\r\n//                     //color: '#f90000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 2\",\r\n//                     data:[2, 3, 2, 5, 6, 5, 1, 6],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 3\",\r\n//                     data:[3, 2, 3, 7, 2, 4, 5, 4],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 4\",\r\n//                     data:[6, 2, 5, 8, 1, 4, 5, 7],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 5\",\r\n//                     data:[3, 6, 3, 2, 4, 2, 5, 2],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 6\",\r\n//                     data:[6, 2, 5, 8, 1, 1, 6, 6],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 7\",\r\n//                     data:[2, 6, 7, 2, 1, 6, 2, 5],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 8\",\r\n//                     data:[4, 5, 7, 4, 5, 6, 2, 5],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 9\",\r\n//                     data:[1, 6, 6, 2, 4, 3, 2, 3],\r\n//                    // color: '#000000'\r\n//                 },\r\n//                 {\r\n//                     name:\"state 10\",\r\n//                     data:[2, 5, 2, 3, 1, 3, 6, 3],\r\n//                    // color: '#000000'\r\n//                 }\r\n//                 ]}\r\n//                 options={{\r\n//                     title:{\r\n//                         text:\"Employee BarChart\"\r\n//                     },\r\n//                     chart:{\r\n//                         stacked:true,\r\n//                     },\r\n//                     plotOptions:{\r\n//                         bar:{\r\n//                             horizontal:true,\r\n//                             columnWidth:'100%'\r\n//                           }\r\n//                     },\r\n//                     stroke: {\r\n//                         width: 5,\r\n//                     },\r\n//                     xaxis:{\r\n//                         title:{\r\n//                             text:\"state level\"\r\n//                         },\r\n//                         categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n//                     },\r\n//                     yaxis:{\r\n//                         title:{\r\n//                             text:\"Users\"\r\n//                         },\r\n//                     },\r\n//                     legend:{\r\n//                         position: 'right'\r\n//                     },\r\n//                     dataLabels:{\r\n//                         enabled:true,\r\n//                     },\r\n//                     grid: {\r\n//                         show:true,\r\n//                         xaxis:{\r\n//                             lines:{\r\n//                                 show:false\r\n//                             }\r\n//                         },\r\n//                         yaxis:{\r\n//                             lines:{\r\n//                                 show:false\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }}\r\n//                 /></div></React.Fragment>\r\n//     );\r\n// }\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport {\r\n  chart as ChartJS,\r\n  categoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js'\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst StackedBarchart = () => {\r\n  const [data, setData] = useState({\r\n    labels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"],\r\n    datasets: [ \r\n      \r\n      {\r\n        label: \"State 1\", \r\n        backgroundColor: \"#FF6384\",\r\n        data: [4, 5, 4, 3, 2],\r\n      },\r\n      {\r\n        label: \"State 2\",\r\n        backgroundColor: \"#36A2EB\",\r\n        data: [2, 3, 2, 5, 6, 7, 5],\r\n      },\r\n      {\r\n        label: \"State 3\",\r\n        backgroundColor: \"#f3ba2f\",\r\n        data: [3, 2, 3, 7, 2, 5, 1, 4, 3, 4],\r\n      },\r\n      {\r\n        label: \"State 4\",\r\n        backgroundColor: \"#2a71d0\",\r\n        data: [1],\r\n      },\r\n      {\r\n        label: \"State 5\",\r\n        backgroundColor: \"#ee82ee\",\r\n        data: [1],\r\n      },\r\n      {\r\n        label: \"State 6\",\r\n        backgroundColor: \"#3cb371\",\r\n        data: [1, 4, 5, 7, 1, 4, 5, 7, 3, 9],\r\n      },\r\n      {\r\n        label: \"State 7\",\r\n        backgroundColor: \"#6a5acd\",\r\n        data: [7, 2, 7, 2, 1, 5, 4, 8, 3, 6],\r\n      },\r\n      {\r\n        label: \"State 8\",\r\n        backgroundColor: \"#ffa500\",\r\n        data: [3, 6, 4, 1, 1, 6, 4, 2, 8, 3],\r\n      },\r\n      {\r\n        label: \"State 9\",\r\n        backgroundColor: \"#616161\",\r\n        data: [1, 7, 5, 4, 1, 5, 7, 2, 4, 6],\r\n      },\r\n      {        \r\n        label: \"State 10\",\r\n        backgroundColor: \"#b4b4b4\",\r\n        data: [ 6, 8, 4, 2, 9, 7, 3, 4, 1, 7],\r\n\r\n      },      \r\n    ],\r\n  });\r\n\r\n  const options = {\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {beginATZero: true },\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Bar data={data}  height={0} options={options} />\r\n    </div>\r\n  );\r\n};*/\r\n\r\n// export default Stackedbarchart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,cAAc,MAAM,kBAAkB;AAAC;AAE9C,MAAMC,eAAe,GAAG,MAAM;EAAA;EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,kCAAkC,CAAC;QACpE,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;;QAE1B;QACA,MAAMC,iBAAiB,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;UACnD,MAAMC,IAAI,GAAGD,IAAI,CAACE,aAAa;UAC/B,MAAMC,KAAK,GAAGH,IAAI,CAACI,aAAa;UAEhC,IAAI,CAACL,GAAG,CAACE,IAAI,CAAC,EAAE;YACdF,GAAG,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;UAChB;UAEA,IAAI,CAACF,GAAG,CAACE,IAAI,CAAC,CAACE,KAAK,CAAC,EAAE;YACrBJ,GAAG,CAACE,IAAI,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC;UACtB;UAEAJ,GAAG,CAACE,IAAI,CAAC,CAACE,KAAK,CAAC,IAAI,CAAC;UACrB,OAAOJ,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEN;QACA,MAAMR,SAAS,GAAGc,MAAM,CAACC,IAAI,CAACT,iBAAiB,CAAC,CAACU,GAAG,CAAEN,IAAI,KAAM;UAC9DO,IAAI,EAAEP,IAAI;UACVL,IAAI,EAAES,MAAM,CAACC,IAAI,CAACT,iBAAiB,CAACI,IAAI,CAAC,CAAC,CAACM,GAAG,CAAEJ,KAAK,IAAKN,iBAAiB,CAACI,IAAI,CAAC,CAACE,KAAK,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEHX,YAAY,CAACD,SAAS,CAAC;MACzB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IAEDhB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,OAAO,GAAG;IACdC,KAAK,EAAE;MACLC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAE,gBAAA1B,SAAS,CAAC,CAAC,CAAC,gDAAZ,YAAcK,IAAI,KAAI,EAAE,CAAE;IACxC,CAAC;;IACDsB,WAAW,EAAE;MACXC,GAAG,EAAE;QACHC,UAAU,EAAE;MACd;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAE;MACJC,OAAO,EAAE;IACX;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,6BAA6B;IAAA,wBAC1C;MAAA,UAAI;IAAiD;MAAA;MAAA;MAAA;IAAA,QAAK,eAC1D,QAAC,cAAc;MACb,OAAO,EAAEZ,OAAQ;MACjB,MAAM,EAAErB,SAAU;MAClB,IAAI,EAAC,KAAK;MACV,MAAM,EAAE;IAAI;MAAA;MAAA;MAAA;IAAA,QACZ;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAzEID,eAAe;AAAA,KAAfA,eAAe;AA2ErB,eAAeA,eAAe},"metadata":{},"sourceType":"module","externalDependencies":[]}