{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juhipawa\\\\Downloads\\\\Charts-main\\\\Charts-main\\\\src\\\\components\\\\StackedBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { chart as ChartJS, categoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from \"react-chartjs-2\";\nimport faker from 'faker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const options = {\n  plugins: {\n    title: {\n      display: true,\n      text: 'Chart.js Bar Chart - Stacked'\n    }\n  },\n  responsive: true,\n  scales: {\n    x: {\n      stacked: true\n    },\n    y: {\n      stacked: true\n    }\n  }\n};\nconst StackedBarChart = () => {\n  _s();\n  const [data, setData] = useState({\n    labels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\", \"User 5\", \"User 6\", \"User 7\", \"User 8\"],\n    datasets: [{\n      label: 'state 1',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 2',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 3',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 4',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 5',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 6',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 7',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 8',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 9',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }, {\n      label: 'state 10',\n      data: labels.map(() => faker.datatype.number({\n        min: -1000,\n        max: 1000\n      })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }]\n  });\n  const options = {\n    scales: {\n      x: [{\n        stacked: true\n      }],\n      y: [{\n        ticks: {\n          beginATZero: true\n        },\n        stacked: true\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      height: 0,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(StackedBarChart, \"gcikpGoN8Y94+/l614gQ0V4brNM=\");\n_c = StackedBarChart;\nexport default StackedBarChart;\n\n/*import React from \"react\";\r\nimport Chart from \"react-chartjs-2\";\r\nfunction Stackedbarchart()\r\n{\r\n    return(<div className=\"Charts\"><h2>Stacked bar chart in react react-chartjs-2</h2>\r\n                <type = \"bar\"\r\n                width={1349}\r\n                height={560}\r\n                series={[\r\n                    {\r\n                        name:\"state 1\",\r\n                        data:[4, 5, 4, 3,2],\r\n                        //color: '#f90000'\r\n                    },\r\n                    {\r\n                        name:\"state 2\",\r\n                        data:[2, 3, 2, 5,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 3\",\r\n                        data:[3, 2, 3, 7,2],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 4\",\r\n                        data:[1, 4, 5, 4,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 5\",\r\n                        data:[3, 6, 3, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 6\",\r\n                        data:[6, 2, 5, 8,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 7\",\r\n                        data:[2, 6, 7, 2,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 8\",\r\n                        data:[4, 5, 7, 4,5],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 9\",\r\n                        data:[1, 6, 6, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 10\",\r\n                        data:[2, 5, 2, 3,1],\r\n                       // color: '#000000'\r\n                    }\r\n                ]}\r\n                options={{\r\n                    title:{\r\n                        text:\"work status\"\r\n                    },\r\n                    chart:{\r\n                        stacked:true,\r\n                    },\r\n                    plotOptions:{\r\n                        bar:{\r\n                            horizontal:true,\r\n                            columnWidth:'100%'\r\n                          }\r\n                    },\r\n                    stroke: {\r\n                        width: 1,\r\n                    },\r\n                    xaxis:{\r\n                        title:{\r\n                            text:\"work status\"\r\n                        },\r\n                        categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n                    },\r\n                    yaxis:{\r\n                        title:{\r\n                            text:\"Data in state level\"\r\n                        },\r\n                    },\r\n                    legend:{\r\n                        position: 'bottom'\r\n                    },\r\n                    dataLabels:{\r\n                        enabled:true,\r\n                    },\r\n                    grid: {\r\n                        show:true,\r\n                        xaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        },\r\n                        yaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                />\r\n    );\r\n}\r\nexport default Stackedbarchart;*/\nvar _c;\n$RefreshReg$(_c, \"StackedBarChart\");","map":{"version":3,"names":["React","useState","chart","ChartJS","categoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","faker","register","CategoryScale","options","plugins","title","display","text","responsive","scales","x","stacked","y","StackedBarChart","data","setData","labels","datasets","label","map","datatype","number","min","max","backgroundColor","ticks","beginATZero"],"sources":["C:/Users/juhipawa/Downloads/Charts-main/Charts-main/src/components/StackedBarChart.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  chart as ChartJS,\r\n  categoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js'\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport faker from 'faker';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  plugins: {\r\n    title: {\r\n      display: true,\r\n      text: 'Chart.js Bar Chart - Stacked',\r\n    },\r\n  },\r\n  responsive: true,\r\n  scales: {\r\n    x: {\r\n      stacked: true,\r\n    },\r\n    y: {\r\n      stacked: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst StackedBarChart = () => {\r\n  const [data, setData] = useState({\r\n    labels: [\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"],\r\n    datasets: [ \r\n      \r\n      {\r\n        label: 'state 1',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 2',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 3',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 4',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 5',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 6',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 7',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 8',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 9',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },\r\n      {\r\n        label: 'state 10',\r\n        data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n      },  \r\n    ],\r\n  });\r\n\r\n  const options = {\r\n    scales: {\r\n      x: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n      y: [\r\n        {\r\n          ticks: {beginATZero: true },\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Bar data={data}  height={0} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StackedBarChart;\r\n\r\n\r\n\r\n\r\n/*import React from \"react\";\r\nimport Chart from \"react-chartjs-2\";\r\nfunction Stackedbarchart()\r\n{\r\n    return(<div className=\"Charts\"><h2>Stacked bar chart in react react-chartjs-2</h2>\r\n                <type = \"bar\"\r\n                width={1349}\r\n                height={560}\r\n                series={[\r\n                    {\r\n                        name:\"state 1\",\r\n                        data:[4, 5, 4, 3,2],\r\n                        //color: '#f90000'\r\n                    },\r\n                    {\r\n                        name:\"state 2\",\r\n                        data:[2, 3, 2, 5,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 3\",\r\n                        data:[3, 2, 3, 7,2],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 4\",\r\n                        data:[1, 4, 5, 4,6],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 5\",\r\n                        data:[3, 6, 3, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 6\",\r\n                        data:[6, 2, 5, 8,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 7\",\r\n                        data:[2, 6, 7, 2,1],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 8\",\r\n                        data:[4, 5, 7, 4,5],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 9\",\r\n                        data:[1, 6, 6, 2,4],\r\n                       // color: '#000000'\r\n                    },\r\n                    {\r\n                        name:\"state 10\",\r\n                        data:[2, 5, 2, 3,1],\r\n                       // color: '#000000'\r\n                    }\r\n                ]}\r\n                options={{\r\n                    title:{\r\n                        text:\"work status\"\r\n                    },\r\n                    chart:{\r\n                        stacked:true,\r\n                    },\r\n                    plotOptions:{\r\n                        bar:{\r\n                            horizontal:true,\r\n                            columnWidth:'100%'\r\n                          }\r\n                    },\r\n                    stroke: {\r\n                        width: 1,\r\n                    },\r\n                    xaxis:{\r\n                        title:{\r\n                            text:\"work status\"\r\n                        },\r\n                        categories:[\"User 1\", \"User 2\", \"User 3\", \"User 4\",\"User 5\",\"User 6\",\"User 7\",\"User 8\"]\r\n                    },\r\n                    yaxis:{\r\n                        title:{\r\n                            text:\"Data in state level\"\r\n                        },\r\n                    },\r\n                    legend:{\r\n                        position: 'bottom'\r\n                    },\r\n                    dataLabels:{\r\n                        enabled:true,\r\n                    },\r\n                    grid: {\r\n                        show:true,\r\n                        xaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        },\r\n                        yaxis:{\r\n                            lines:{\r\n                                show:false\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                />\r\n    );\r\n}\r\nexport default Stackedbarchart;*/\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}