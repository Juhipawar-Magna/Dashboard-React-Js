{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juhipawa\\\\Downloads\\\\Charts-main\\\\Charts-main\\\\src\\\\components\\\\PieChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Piechart() {\n  _s();\n  const [employeeName, setEmployeename] = useState([]);\n  const [stateLevels, setStatelevels] = useState([]);\n  useEffect(() => {\n    const sName = [];\n    const sLevel = [];\n    const getEmployeedata = async () => {\n      const reqData = await fetch(\"./components/Data\");\n      const resData = await reqData.json();\n      for (let i = 0; i < resData.length; i++) {\n        sName.push(resData[i].employee);\n        sLevel.push(parseInt(resData[i].statelevel));\n      }\n      setEmployeename(sName);\n      setStatelevels(sLevel);\n      //console.log(resData); \n    };\n\n    getEmployeedata();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Work Status mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-3\",\n        children: \"Welcome to Piechart \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 62\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        type: \"pie\",\n        width: 1349,\n        height: 550,\n        series: [111, 22, 33, 44, 55, 66, 77, 88, 99, 28],\n        options: {\n          title: {\n            text: \"Employee PieChart\"\n          },\n          noData: {\n            text: \"Data\"\n          },\n          // colors:[\"#f90000\",\"#f0f\"],\n          labels: [\"State 1\", \"State 2\", \"State 3\", \"State 4\", \"State 5\", \"State 6\", \"State 7\", \"State 8\", \"State 9\", \"State 10\"]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 108\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 12\n  }, this);\n}\n_s(Piechart, \"tjeOWcGEhLtUcldCfVAbx558CoI=\");\n_c = Piechart;\nexport default Piechart;\n\n/*import React, { useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart, registerables,ArcElement } from \"chart.js\";\r\nChart.register(...registerables);\r\nChart.register(ArcElement);\r\n\r\nconst MonochromePieChart = () => {\r\n  const [data, setData] = useState({\r\n    labels: [\"State 1\", \"State 2\", \"State 3\", \"State 4\", \"State 5\", \"State 6\" , \"State 7\", \"State 8\", \"State 9\", \"State 10\"],\r\n    datasets: [\r\n      {\r\n        data: [5, 8, 4, 4, 8, 11, 2, 7, 5, 6],\r\n        backgroundColor: [\r\n          \"rgba(255, 99, 132)\",\r\n          \"rgba(54, 162, 235)\",\r\n          \"rgba(255, 206, 86)\",\r\n          \"rgba(75, 192, 192)\",\r\n          \"rgba(153, 102, 255)\",\r\n          \"rgba(60, 179, 113)\",\r\n          \"rgba(210, 210, 210)\",\r\n          \"rgba(106, 90, 205)\",\r\n          \"rgba(255, 99, 71)\",\r\n          \"rgba(255, 165, 0)\",\r\n\r\n        ],\r\n        hoverBackgroundColor: [\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n        ],\r\n        borderwidth: 1\r\n      },\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <div className=\"PieChart\" style={{ height: '40%' , width:'30%'}}>\r\n      <Pie data={data} options={{ maintainAspectRatio: true }} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/*import { useEffect, useState } from 'react';\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport {Chart as ChartJs, Tooltip, Title, ArcElement, Legend} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nChartJs.register(\r\n  Tooltip, Title, ArcElement, Legend\r\n);\r\nconst data = {\r\n    datasets: [{\r\n        data: [10, 20, 30],\r\n        backgroundColor:[\r\n          'red',\r\n          'blue',\r\n          'yellow'\r\n        ]\r\n    },\r\n  ],\r\n  // These labels appear in the legend and in the tooltips when hovering different arcs\r\n  labels: [\r\n    \"State 1\", \r\n    \"State 2\", \r\n    \"State 3\",\r\n    \"State 4\", \r\n    \"State 5\",\r\n    \"State 6\",\r\n    \"State 7\",\r\n    \"State 8\", \r\n    \"State 9\",\r\n    \"State 10\"\r\n  ], \r\n};\r\nfunction App() {\r\n  const [data, setData] = useState({\r\n    datasets: [{\r\n        data: [10, 20, 30],\r\n        backgroundColor:[\r\n          'red',\r\n          'blue',\r\n          'yellow'\r\n        ]\r\n    },\r\n  ],\r\n  labels: [\r\n      'Red',\r\n      'Yellow',\r\n      'Blue'\r\n  ], \r\n});\r\n  useEffect(()=> {\r\n    const fetchData = () =>  {\r\n      fetch('https://jsonplaceholder.typicode.com/users').then((data) => {\r\n        const res = data.json();\r\n        return res\r\n      }).then((res) => {\r\n        console.log(\"resss\", res)\r\n        const label = [];\r\n        const data = [];\r\n        for(var i of res) {\r\n            label.push(i.name);\r\n            data.push(i.id)\r\n        }\r\n        setData(\r\n          {\r\n            datasets: [{\r\n                data:data,\r\n                backgroundColor:[\r\n                  'red',\r\n                  'blue',\r\n                  'yellow'\r\n                ]\r\n            },\r\n          ],\r\n          labels:label, \r\n        }\r\n        )\r\n      }).catch(e => {\r\n        console.log(\"error\", e)\r\n      }) \r\n    }\r\n  fetchData();\r\n  }, [])\r\n  return (<div className=\"Pie\" style={{width:'30%', height:'30%'}}><PieChart data={data}/></div>\r\n  );\r\n}\r\nexport default MonochromePieChart;*/\nvar _c;\n$RefreshReg$(_c, \"Piechart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","Piechart","employeeName","setEmployeename","stateLevels","setStatelevels","sName","sLevel","getEmployeedata","reqData","fetch","resData","json","i","length","push","employee","parseInt","statelevel","title","text","noData","labels"],"sources":["C:/Users/juhipawa/Downloads/Charts-main/Charts-main/src/components/PieChart.js"],"sourcesContent":["import React ,{ useState, useEffect} from \"react\";\r\nimport  Chart  from \"react-apexcharts\";\r\nfunction Piechart()\r\n{\r\n   const [employeeName, setEmployeename]= useState([]);\r\n   const [stateLevels, setStatelevels]= useState([]);\r\n   useEffect( ()=>{\r\n       const sName=[];\r\n       const sLevel=[];\r\n       const getEmployeedata= async()=>{\r\n       const reqData= await fetch(\"./components/Data\");\r\n       const resData= await reqData.json();       \r\n       for(let i=0; i< resData.length; i++)\r\n       {\r\n        sName.push(resData[i].employee);\r\n        sLevel.push(parseInt(resData[i].statelevel));\r\n       }\r\n       setEmployeename(sName);\r\n       setStatelevels(sLevel);\r\n        //console.log(resData); \r\n       }\r\n    getEmployeedata();\r\n   },[]);\r\n    return(<React.Fragment><div className=\"Work Status mb-3\"><h3 className=\"mt-3\">Welcome to Piechart </h3><Chart \r\n                type=\"pie\"\r\n                width={1349}\r\n                height={550}\r\n                series={[111,22,33,44,55,66,77,88,99,28] }                \r\n                options={{\r\n                        title:{ text:\"Employee PieChart\"\r\n                        } , \r\n                       noData:{text:\"Data\"},                        \r\n                      // colors:[\"#f90000\",\"#f0f\"],\r\n                      labels:[\"State 1\", \"State 2\", \"State 3\", \"State 4\", \"State 5\", \"State 6\" , \"State 7\", \"State 8\", \"State 9\", \"State 10\"]                  \r\n                 }}></Chart></div></React.Fragment>\r\n    );\r\n}\r\nexport default Piechart;\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart, registerables,ArcElement } from \"chart.js\";\r\nChart.register(...registerables);\r\nChart.register(ArcElement);\r\n\r\nconst MonochromePieChart = () => {\r\n  const [data, setData] = useState({\r\n    labels: [\"State 1\", \"State 2\", \"State 3\", \"State 4\", \"State 5\", \"State 6\" , \"State 7\", \"State 8\", \"State 9\", \"State 10\"],\r\n    datasets: [\r\n      {\r\n        data: [5, 8, 4, 4, 8, 11, 2, 7, 5, 6],\r\n        backgroundColor: [\r\n          \"rgba(255, 99, 132)\",\r\n          \"rgba(54, 162, 235)\",\r\n          \"rgba(255, 206, 86)\",\r\n          \"rgba(75, 192, 192)\",\r\n          \"rgba(153, 102, 255)\",\r\n          \"rgba(60, 179, 113)\",\r\n          \"rgba(210, 210, 210)\",\r\n          \"rgba(106, 90, 205)\",\r\n          \"rgba(255, 99, 71)\",\r\n          \"rgba(255, 165, 0)\",\r\n\r\n        ],\r\n        hoverBackgroundColor: [\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n          \"rgb(255,255,255)\",\r\n        ],\r\n        borderwidth: 1\r\n      },\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <div className=\"PieChart\" style={{ height: '40%' , width:'30%'}}>\r\n      <Pie data={data} options={{ maintainAspectRatio: true }} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/*import { useEffect, useState } from 'react';\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport {Chart as ChartJs, Tooltip, Title, ArcElement, Legend} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nChartJs.register(\r\n  Tooltip, Title, ArcElement, Legend\r\n);\r\nconst data = {\r\n    datasets: [{\r\n        data: [10, 20, 30],\r\n        backgroundColor:[\r\n          'red',\r\n          'blue',\r\n          'yellow'\r\n        ]\r\n    },\r\n  ],\r\n  // These labels appear in the legend and in the tooltips when hovering different arcs\r\n  labels: [\r\n    \"State 1\", \r\n    \"State 2\", \r\n    \"State 3\",\r\n    \"State 4\", \r\n    \"State 5\",\r\n    \"State 6\",\r\n    \"State 7\",\r\n    \"State 8\", \r\n    \"State 9\",\r\n    \"State 10\"\r\n  ], \r\n};\r\nfunction App() {\r\n  const [data, setData] = useState({\r\n    datasets: [{\r\n        data: [10, 20, 30],\r\n        backgroundColor:[\r\n          'red',\r\n          'blue',\r\n          'yellow'\r\n        ]\r\n    },\r\n  ],\r\n  labels: [\r\n      'Red',\r\n      'Yellow',\r\n      'Blue'\r\n  ], \r\n});\r\n  useEffect(()=> {\r\n    const fetchData = () =>  {\r\n      fetch('https://jsonplaceholder.typicode.com/users').then((data) => {\r\n        const res = data.json();\r\n        return res\r\n      }).then((res) => {\r\n        console.log(\"resss\", res)\r\n        const label = [];\r\n        const data = [];\r\n        for(var i of res) {\r\n            label.push(i.name);\r\n            data.push(i.id)\r\n        }\r\n        setData(\r\n          {\r\n            datasets: [{\r\n                data:data,\r\n                backgroundColor:[\r\n                  'red',\r\n                  'blue',\r\n                  'yellow'\r\n                ]\r\n            },\r\n          ],\r\n          labels:label, \r\n        }\r\n        )\r\n      }).catch(e => {\r\n        console.log(\"error\", e)\r\n      }) \r\n    }\r\n  fetchData();\r\n  }, [])\r\n  return (<div className=\"Pie\" style={{width:'30%', height:'30%'}}><PieChart data={data}/></div>\r\n  );\r\n}\r\nexport default MonochromePieChart;*/\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,OAAQC,KAAK,MAAO,kBAAkB;AAAC;AACvC,SAASC,QAAQ,GACjB;EAAA;EACG,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAEL,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAEP,QAAQ,CAAC,EAAE,CAAC;EACjDC,SAAS,CAAE,MAAI;IACX,MAAMO,KAAK,GAAC,EAAE;IACd,MAAMC,MAAM,GAAC,EAAE;IACf,MAAMC,eAAe,GAAE,YAAS;MAChC,MAAMC,OAAO,GAAE,MAAMC,KAAK,CAAC,mBAAmB,CAAC;MAC/C,MAAMC,OAAO,GAAE,MAAMF,OAAO,CAACG,IAAI,EAAE;MACnC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAEF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EACnC;QACCP,KAAK,CAACS,IAAI,CAACJ,OAAO,CAACE,CAAC,CAAC,CAACG,QAAQ,CAAC;QAC/BT,MAAM,CAACQ,IAAI,CAACE,QAAQ,CAACN,OAAO,CAACE,CAAC,CAAC,CAACK,UAAU,CAAC,CAAC;MAC7C;MACAf,eAAe,CAACG,KAAK,CAAC;MACtBD,cAAc,CAACE,MAAM,CAAC;MACrB;IACD,CAAC;;IACJC,eAAe,EAAE;EAClB,CAAC,EAAC,EAAE,CAAC;EACJ,oBAAO,QAAC,KAAK,CAAC,QAAQ;IAAA,uBAAC;MAAK,SAAS,EAAC,kBAAkB;MAAA,wBAAC;QAAI,SAAS,EAAC,MAAM;QAAA,UAAC;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAK,uBAAC,KAAK;QACjG,IAAI,EAAC,KAAK;QACV,KAAK,EAAE,IAAK;QACZ,MAAM,EAAE,GAAI;QACZ,MAAM,EAAE,CAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAG;QAC1C,OAAO,EAAE;UACDW,KAAK,EAAC;YAAEC,IAAI,EAAC;UACb,CAAC;UACFC,MAAM,EAAC;YAACD,IAAI,EAAC;UAAM,CAAC;UACrB;UACAE,MAAM,EAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAG,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU;QAC3H;MAAE;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EAAM;IAAA;IAAA;IAAA;EAAA,QAAiB;AAEnD;AAAC,GAlCQrB,QAAQ;AAAA,KAARA,QAAQ;AAmCjB,eAAeA,QAAQ;;AAEvzIA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}